# Production Deployment Configuration for Symbiotic Syntheconomy

# Kubernetes Deployment Configuration
apiVersion: v1
kind: Namespace
metadata:
  name: syntheconomy-prod
---

# Deployment for Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: syntheconomy-app
  namespace: syntheconomy-prod
  labels:
    app: syntheconomy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: syntheconomy
  template:
    metadata:
      labels:
        app: syntheconomy
    spec:
      containers:
      - name: syntheconomy
        image: syntheconomy/app:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: database-url
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
---

# Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: syntheconomy-service
  namespace: syntheconomy-prod
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app: syntheconomy
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer
---

# Horizontal Pod Autoscaler for Auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: syntheconomy-hpa
  namespace: syntheconomy-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: syntheconomy-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---

# Ingress with SSL Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: syntheconomy-ingress
  namespace: syntheconomy-prod
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.syntheconomy.io
    secretName: syntheconomy-tls
  rules:
  - host: api.syntheconomy.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: syntheconomy-service
            port:
              number: 80
---

# Database Cluster Configuration (PostgreSQL)
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: syntheconomy-db
  namespace: syntheconomy-prod
spec:
  instances: 3
  imageName: ghcr.io/cloudnative-pg/postgres:15
  size: 10Gi
  storage:
    storageClass: premium-rwo
  resources:
    requests:
      cpu: "1000m"
      memory: "1024Mi"
    limits:
      cpu: "2000m"
      memory: "2048Mi"
  backup:
    barmanObjectStore:
      destinationPath: s3://syntheconomy-backups/db
      endpointURL: https://s3.amazonaws.com
      s3Credentials:
        accessKeyId:
          name: s3-credentials
          key: access-key-id
        secretAccessKey:
          name: s3-credentials
          key: secret-access-key
    retentionPolicy: "30d"
  replicationSlots:
    highAvailability:
      enabled: true
---

# Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: syntheconomy-backup
  namespace: syntheconomy-prod
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: syntheconomy/backup:latest
            env:
            - name: BACKUP_TARGET
              value: "s3://syntheconomy-backups/app"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: s3-credentials
                  key: access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-credentials
                  key: secret-access-key
          restartPolicy: OnFailure
---

# Monitoring and Alerting (Prometheus and Grafana)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: syntheconomy-monitor
  namespace: syntheconomy-prod
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: syntheconomy
  endpoints:
  - port: http
    path: /metrics
    interval: 15s
---

# Alerting Rules
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: syntheconomy-alerts
  namespace: syntheconomy-prod
  labels:
    release: prometheus
spec:
  groups:
  - name: syntheconomy.rules
    rules:
    - alert: HighErrorRate
      expr: rate(http_requests_total{status="500"}[5m]) > 0.05
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "High error rate on Syntheconomy API"
        description: "Error rate is above 5% for the last 5 minutes."
    - alert: HighLatency
      expr: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le)) > 2
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High API latency on Syntheconomy"
        description: "95th percentile latency is above 2s for the last 5 minutes."
---

# Disaster Recovery Procedure (Documentation)
# 1. Database Recovery:
#   - Restore from S3 backups using: kubectl cnpg restore syntheconomy-db
#   - Verify data integrity and replication status
# 2. Application Recovery:
#   - Redeploy using latest stable image: kubectl rollout restart deployment/syntheconomy-app
#   - Monitor health endpoints and logs
# 3. Failover:
#   - Switch traffic to secondary region using DNS failover
#   - Update ingress rules if necessary
# 4. Post-recovery:
#   - Analyze root cause and update disaster recovery plan
#   - Test backup restoration monthly
