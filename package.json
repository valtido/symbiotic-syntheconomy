{
  "name": "symbiotic-syntheconomy",
  "version": "1.0.0",
  "description": "Global Regeneration Ceremony (GRC) simulation for Symbiotic Syntheconomy v1.0",
  "private": true,
  "workspaces": [
    "backend",
    "frontend",
    "contracts"
  ],
  "scripts": {
    "sync": "ts-node backend/src/sync/gitSync.ts",
    "log:append": "ts-node scripts/appendLog.ts",
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd backend && npm run dev",
    "dev:frontend": "cd frontend && npm run dev",
    "build": "npm run build:backend && npm run build:frontend && npm run build:contracts",
    "build:backend": "cd backend && npm run build",
    "build:frontend": "cd frontend && npm run build",
    "build:contracts": "cd contracts && npm run build",
    "test": "npm run test:backend && npm run test:frontend && npm run test:contracts",
    "test:backend": "cd backend && npm run test",
    "test:frontend": "cd frontend && npm run test",
    "test:contracts": "cd contracts && npm run test",
    "deploy:contracts": "cd contracts && npm run deploy",
    "install:all": "npm install && cd backend && npm install && cd ../frontend && npm install && cd ../contracts && npm install",
    "ritual:start": "npx tsx scripts/startRitualDevelopment.ts",
    "ritual:coordinate": "npx tsx scripts/ritualCoordination.ts",
    "webhook:test": "curl -X POST http://localhost:3002/webhook/trigger-sync -H \"Content-Type: application/json\" -d '{\"action\":\"test\"}'",
    "dev:dashboard": "cd dashboard && npm run dev",
    "watch:sync": "tsx watch scripts/fileWatcher.ts",
    "cleanup:patches": "tsx scripts/cleanupPatches.ts",
    "simulate:ai": "npx tsx scripts/aiAgentSimulator.ts",
    "simulate:ai:fast": "npx tsx scripts/aiAgentSimulator.ts 1",
    "monitor:activity": "npx tsx scripts/monitorActivity.ts",
    "monitor:robust": "npx tsx scripts/robustMonitor.ts",
    "monitor:system": "npx tsx scripts/systemMonitor.ts",
    "start:system": "npx tsx scripts/startSystem.ts",
    "status": "npx tsx scripts/systemStatus.ts",
    "ai:next-patch": "npx tsx scripts/generateNextPatch.ts",
    "ai:apply": "npx tsx scripts/autoApplyAIContribution.ts",
    "ai:webhook": "npx tsx scripts/aiWebhookServer.ts",
    "ai:api": "npx tsx scripts/aiApiServer.ts",
    "ai:api:mock": "npx tsx scripts/aiApiServerMock.ts",
    "tasks:generate": "npx tsx scripts/taskManager.ts generate",
    "tasks:process": "npx tsx scripts/taskManager.ts process",
    "tasks:list": "npx tsx scripts/taskManager.ts list",
    "tasks:stats": "npx tsx scripts/taskManager.ts stats",
    "tasks:next": "npx tsx scripts/taskManager.ts next",
    "configure:ai-agents": "npx tsx scripts/configureAIAgents.ts",
    "fix:webhook": "npx tsx scripts/fixWebhook.ts",
    "test:jest": "jest",
    "jest": "jest"
  },
  "devDependencies": {
    "@types/jest": "^30.0.0",
    "concurrently": "^8.2.2",
    "jest": "^30.0.4",
    "ts-jest": "^29.4.0",
    "typescript": "^5.3.3"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "keywords": [
    "regeneration",
    "ceremony",
    "blockchain",
    "dao",
    "sustainability",
    "bioregions"
  ],
  "author": "Valtid Caushi",
  "license": "MIT",
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@mui/material": "^7.2.0",
    "@octokit/auth-app": "^8.0.2",
    "@octokit/request": "^10.0.3",
    "@octokit/rest": "^22.0.0",
    "@testing-library/react": "^16.3.0",
    "@types/express": "^5.0.3",
    "express": "^5.1.0",
    "js-base64": "^3.7.7",
    "jsonwebtoken": "^9.0.2"
  }
}