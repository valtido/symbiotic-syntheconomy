version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: symsyntheconomy/backend:latest
    container_name: backend
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    depends_on:
      - database
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    image: symsyntheconomy/frontend:latest
    container_name: frontend
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - API_URL=${API_URL:-http://backend:3000}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    volumes:
      - ./frontend/build:/app/build
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # AI API Server
  ai-api:
    build:
      context: ./ai-api
      dockerfile: Dockerfile
      target: production
    image: symsyntheconomy/ai-api:latest
    container_name: ai-api
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - AI_MODEL=${AI_MODEL}
      - API_KEY=${API_KEY}
    ports:
      - "${AI_API_PORT:-5000}:5000"
    volumes:
      - ./ai-api/models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Database Service (PostgreSQL)
  database:
    image: postgres:15-alpine
    container_name: database
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-symsyntheconomy}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  db_data:
    driver: local

networks:
  default:
    driver: bridge