#!/usr/bin/env tsx

import { exec } from 'child_process';
import { promisify } from 'util';
import { writeFileSync, readFileSync, existsSync } from 'fs';
import { join } from 'path';

const execAsync = promisify(exec);

interface AIAgent {
  name: string;
  email: string;
  prefix: string;
  emoji: string;
  description: string;
}

const AI_AGENTS: AIAgent[] = [
  {
    name: 'Cursor AI',
    email: 'cursor@example.com',
    prefix: '🤖',
    emoji: '🤖',
    description: 'Cursor AI making intelligent code improvements',
  },
  {
    name: 'Grok AI',
    email: 'grok@example.com',
    prefix: '🧠',
    emoji: '🧠',
    description: 'Grok AI analyzing and optimizing code patterns',
  },
  {
    name: 'ChatGPT AI',
    email: 'chatgpt@example.com',
    prefix: '💬',
    emoji: '💬',
    description: 'ChatGPT AI providing code suggestions and fixes',
  },
  {
    name: 'Claude AI',
    email: 'claude@example.com',
    prefix: '🎯',
    emoji: '🎯',
    description: 'Claude AI performing code review and improvements',
  },
];

const AI_ACTIVITIES = [
  'Code optimization and refactoring',
  'Bug fixes and error handling',
  'Performance improvements',
  'Documentation updates',
  'Security enhancements',
  'Feature implementation',
  'Test coverage improvements',
  'Code style consistency',
  'Dependency updates',
  'Architecture improvements',
];

class AIAgentSimulator {
  private currentAgentIndex = 0;
  private activityIndex = 0;
  private commitCounter = 0;

  constructor(private intervalMinutes: number = 3) {}

  async start() {
    console.log('🤖 Starting AI Agent Simulator...');
    console.log(
      `📅 Commits will be made every ${this.intervalMinutes} minutes`,
    );
    console.log('🔄 Press Ctrl+C to stop the simulation\n');

    // Make initial commit
    await this.makeAIAgentCommit();

    // Set up interval
    setInterval(async () => {
      await this.makeAIAgentCommit();
    }, this.intervalMinutes * 60 * 1000);
  }

  private async makeAIAgentCommit() {
    try {
      const agent = AI_AGENTS[this.currentAgentIndex];
      const activity = AI_ACTIVITIES[this.activityIndex];

      // Configure git for this AI agent
      await execAsync(`git config user.name "${agent.name}"`);
      await execAsync(`git config user.email "${agent.email}"`);

      // Create a file with AI agent activity
      const fileName = `ai-activity-${Date.now()}.md`;
      const filePath = join(process.cwd(), fileName);

      const content = `# ${agent.emoji} ${agent.name} Activity

**Activity:** ${activity}
**Timestamp:** ${new Date().toISOString()}
**Commit #:** ${++this.commitCounter}

## Description
${agent.description}

## Changes Made
- ${activity.toLowerCase()}
- Automated code improvements
- AI-driven optimization

## Status
- [x] AI analysis complete
- [x] Changes validated
- [x] Ready for review

---
*Generated by ${agent.name} - AI Agent Simulator*
`;

      writeFileSync(filePath, content);

      // Stage and commit
      await execAsync(`git add ${fileName}`);

      const commitMessage = `${agent.prefix} ${activity} [AI]`;
      await execAsync(`git commit -m "${commitMessage}"`);

      // Push to trigger webhook
      await execAsync('git push origin main');

      console.log(
        `✅ ${agent.emoji} ${agent.name} made commit: "${commitMessage}"`,
      );
      console.log(`📁 Created: ${fileName}`);
      console.log(`🔄 Webhook should trigger patch generation...\n`);

      // Rotate to next agent and activity
      this.currentAgentIndex = (this.currentAgentIndex + 1) % AI_AGENTS.length;
      this.activityIndex = (this.activityIndex + 1) % AI_ACTIVITIES.length;
    } catch (error) {
      console.error('❌ Error making AI agent commit:', error);
    }
  }

  async stop() {
    console.log('\n🛑 Stopping AI Agent Simulator...');

    // Restore original git config
    try {
      await execAsync('git config user.name "Valtid Caushi"');
      await execAsync('git config user.email "valtido@hotmail.com"');
      console.log('✅ Git configuration restored');
    } catch (error) {
      console.error('❌ Error restoring git config:', error);
    }
  }
}

// Handle graceful shutdown
process.on('SIGINT', async () => {
  const simulator = new AIAgentSimulator();
  await simulator.stop();
  process.exit(0);
});

// Start simulation if run directly
if (require.main === module) {
  const intervalMinutes = parseInt(process.argv[2]) || 3;
  const simulator = new AIAgentSimulator(intervalMinutes);
  simulator.start();
}

export default AIAgentSimulator;
