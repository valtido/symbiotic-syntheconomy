#!/usr/bin/env tsx

import { exec } from 'child_process';
import { promisify } from 'util';
import { writeFileSync, readFileSync, existsSync } from 'fs';
import { join } from 'path';

const execAsync = promisify(exec);

interface AIAgentConfig {
  name: string;
  email: string;
  description: string;
  instructions: string;
}

const AI_AGENT_CONFIGS: AIAgentConfig[] = [
  {
    name: 'Cursor AI',
    email: 'cursor@example.com',
    description: 'Cursor AI - Intelligent code assistant and developer',
    instructions: `
# Cursor AI Configuration

## Git Identity
- Name: Cursor AI
- Email: cursor@example.com

## How to Use
1. In Cursor, go to Settings > Git
2. Set your name to: "Cursor AI"
3. Set your email to: "cursor@example.com"
4. When making commits, include [AI] in the message

## Example Commits
- "🤖 Fix TypeScript errors in backend [AI]"
- "🤖 Optimize database queries [AI]"
- "🤖 Add error handling to webhook [AI]"
    `,
  },
  {
    name: 'Grok AI',
    email: 'grok@example.com',
    description: 'Grok AI - Advanced code analysis and optimization',
    instructions: `
# Grok AI Configuration

## Git Identity
- Name: Grok AI
- Email: grok@example.com

## How to Use
1. In your Grok environment, configure git:
   git config user.name "Grok AI"
   git config user.email "grok@example.com"

2. When making commits, include [AI] in the message

## Example Commits
- "🧠 Optimize algorithm performance [AI]"
- "🧠 Refactor code structure [AI]"
- "🧠 Add comprehensive tests [AI]"
    `,
  },
  {
    name: 'ChatGPT AI',
    email: 'chatgpt@example.com',
    description: 'ChatGPT AI - Code suggestions and improvements',
    instructions: `
# ChatGPT AI Configuration

## Git Identity
- Name: ChatGPT AI
- Email: chatgpt@example.com

## How to Use
1. In your ChatGPT environment, configure git:
   git config user.name "ChatGPT AI"
   git config user.email "chatgpt@example.com"

2. When making commits, include [AI] in the message

## Example Commits
- "💬 Improve code documentation [AI]"
- "💬 Fix security vulnerabilities [AI]"
- "💬 Enhance user interface [AI]"
    `,
  },
  {
    name: 'Claude AI',
    email: 'claude@example.com',
    description: 'Claude AI - Code review and architectural improvements',
    instructions: `
# Claude AI Configuration

## Git Identity
- Name: Claude AI
- Email: claude@example.com

## How to Use
1. In your Claude environment, configure git:
   git config user.name "Claude AI"
   git config user.email "claude@example.com"

2. When making commits, include [AI] in the message

## Example Commits
- "🎯 Improve code architecture [AI]"
- "🎯 Add comprehensive error handling [AI]"
- "🎯 Optimize database schema [AI]"
    `,
  },
];

class AIAgentConfigurator {
  async configureAllAgents() {
    console.log('🤖 Configuring AI Agents for Real Collaboration...\n');

    for (const agent of AI_AGENT_CONFIGS) {
      await this.configureAgent(agent);
    }

    console.log('\n✅ AI Agent Configuration Complete!');
    console.log('\n📋 Next Steps:');
    console.log('1. Share these configuration files with your AI agents');
    console.log('2. Have them configure their git identities');
    console.log('3. Start making real commits to your repository');
    console.log('4. Watch the webhook system process their activity');
  }

  private async configureAgent(agent: AIAgentConfig) {
    console.log(`🔧 Configuring ${agent.name}...`);

    // Create configuration file for this agent
    const configFileName = `ai-config-${agent.name
      .toLowerCase()
      .replace(/\s+/g, '-')}.md`;
    const configPath = join(process.cwd(), configFileName);

    const configContent = `# ${agent.name} Configuration

${agent.instructions}

## Repository Information
- Repository: https://github.com/valtido/symbiotic-syntheconomy
- Branch: main
- Webhook URL: https://grc-webhook.loca.lt/webhook/github

## Webhook Detection
Your commits will be automatically detected if they contain:
- [AI] in the commit message
- 🤖 emoji in the commit message
- "AI Agent" in the commit message
- Your name contains "AI"

## Expected Workflow
1. Make changes to the codebase
2. Commit with [AI] in the message
3. Push to main branch
4. Webhook will automatically process your commit
5. Patches will be generated for your activity

## Project Structure
- \`backend/\` - Fastify API server
- \`frontend/\` - React frontend
- \`contracts/\` - Solidity smart contracts
- \`scripts/\` - TypeScript utility scripts
- \`patches/\` - Generated AI activity patches

---
*Generated by AI Agent Configurator*
`;

    writeFileSync(configPath, configContent);
    console.log(`   📄 Created: ${configFileName}`);

    // Create a sample commit message file
    const sampleFileName = `sample-commits-${agent.name
      .toLowerCase()
      .replace(/\s+/g, '-')}.txt`;
    const samplePath = join(process.cwd(), sampleFileName);

    const sampleContent = `# Sample Commit Messages for ${agent.name}

## Good Examples:
${agent.name} - Fix TypeScript compilation errors [AI]
${agent.name} - Optimize database query performance [AI]
${agent.name} - Add comprehensive error handling [AI]
${agent.name} - Improve code documentation [AI]
${agent.name} - Refactor component structure [AI]

## Bad Examples:
Fix bugs
Update code
Add features
(These won't trigger the webhook system)

## Remember:
- Always include [AI] in your commit messages
- Use descriptive commit messages
- Focus on one change per commit
- Test your changes before committing
`;

    writeFileSync(samplePath, sampleContent);
    console.log(`   📝 Created: ${sampleFileName}`);
  }

  async showCurrentGitConfig() {
    try {
      const { stdout: name } = await execAsync('git config user.name');
      const { stdout: email } = await execAsync('git config user.email');

      console.log('\n📊 Current Git Configuration:');
      console.log(`   Name: ${name.trim()}`);
      console.log(`   Email: ${email.trim()}`);
    } catch (error) {
      console.log('\n❌ Could not read current git configuration');
    }
  }

  async restoreHumanConfig() {
    console.log('\n🔄 Restoring human git configuration...');

    try {
      await execAsync('git config user.name "Valtid Caushi"');
      await execAsync('git config user.email "valtido@hotmail.com"');
      console.log('✅ Human git configuration restored');
    } catch (error) {
      console.error('❌ Error restoring git config:', error);
    }
  }
}

// Handle graceful shutdown
process.on('SIGINT', async () => {
  const configurator = new AIAgentConfigurator();
  await configurator.restoreHumanConfig();
  process.exit(0);
});

// Start configuration if run directly
if (require.main === module) {
  const configurator = new AIAgentConfigurator();
  configurator.showCurrentGitConfig();
  configurator.configureAllAgents();
}

export default AIAgentConfigurator;
