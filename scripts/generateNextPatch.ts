// scripts/generateNextPatch.ts
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

const execAsync = promisify(exec);

interface Commit {
  id: string;
  message: string;
  author: string;
  date: string;
}

async function getRecentCommits(limit: number = 10): Promise<Commit[]> {
  try {
    const { stdout } = await execAsync(
      `git log --oneline --pretty=format:"%H|%s|%an|%ad" --date=short -${limit}`,
    );

    return stdout
      .trim()
      .split('\n')
      .map((line) => {
        const [id, message, author, date] = line.split('|');
        return { id, message, author, date };
      })
      .filter(
        (commit) =>
          commit.message.includes('[AI]') ||
          commit.message.includes('ü§ñ') ||
          commit.author.includes('Cursor') ||
          commit.author.includes('Grok') ||
          commit.author.includes('AI'),
      );
  } catch (error) {
    console.error('Error getting recent commits:', error);
    return [];
  }
}

async function generatePatch(commit: Commit): Promise<void> {
  const patchDir = path.join(process.cwd(), 'patches');
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const patchFile = path.join(
    patchDir,
    `patch-${commit.id.slice(0, 8)}-${timestamp}.md`,
  );

  // Ensure patches directory exists
  if (!fs.existsSync(patchDir)) {
    fs.mkdirSync(patchDir, { recursive: true });
  }

  const patchContent = `# AI Agent Patch: ${commit.message}

**Commit:** ${commit.id}
**Author:** ${commit.author}
**Date:** ${commit.date}
**Generated:** ${new Date().toISOString()}

## Analysis

This patch was generated in response to AI agent activity detected in the repository.

## Changes Detected

- Commit: \`${commit.id}\`
- Message: "${commit.message}"
- Author: ${commit.author}

## Patch Actions

1. **Repository Sync:** Ensuring all AI agents have latest changes
2. **Conflict Resolution:** Checking for merge conflicts
3. **Validation:** Verifying AI-generated content meets project standards

## Status

- [ ] Reviewed by human maintainer
- [ ] Applied to main branch
- [ ] Notified AI agents of changes

---
*Generated by Symbiotic Syntheconomy AI Coordination System*
`;

  fs.writeFileSync(patchFile, patchContent);
  console.log(`‚úÖ Generated patch: ${patchFile}`);
}

async function main() {
  console.log('ü§ñ Starting AI patch generation...');

  try {
    // Pull latest changes
    console.log('üì• Pulling latest changes...');
    await execAsync('git pull origin main');

    // Get recent AI agent commits
    console.log('üîç Analyzing recent commits...');
    const aiCommits = await getRecentCommits(20);

    if (aiCommits.length === 0) {
      console.log('‚ÑπÔ∏è No recent AI agent commits found');
      return;
    }

    console.log(`üìù Found ${aiCommits.length} AI agent commits`);

    // Generate patches for each AI commit
    for (const commit of aiCommits) {
      await generatePatch(commit);
    }

    console.log('‚úÖ AI patch generation completed');
  } catch (error) {
    console.error('‚ùå Error in AI patch generation:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}
