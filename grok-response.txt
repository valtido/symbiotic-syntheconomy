{
  "agent": "ChatGPT",
  "task": "Create AI-powered ritual music and sound synthesis",
  "filePath": "backend/src/services/musicSynthesisService.ts",
  "code": "// musicSynthesisService.ts - AI-powered ritual music and sound synthesis service\n\nimport { promisify } from 'util';\nimport { exec } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\n// Promisify exec for async/await usage\nconst execPromise = promisify(exec);\n\n// Define types for ritual music synthesis\ninterface RitualSoundscape {\n  culture: string;\n  mood: 'calm' | 'intense' | 'mystical' | 'celebratory';\n  duration: number; // in seconds\n  instruments: string[];\n}\n\ninterface SynthesisResult {\n  filePath: string;\n  duration: number;\n  error?: string;\n}\n\nclass MusicSynthesisService {\n  private outputDir: string;\n  private readonly BASE_COMMAND = 'python3';\n  private readonly SCRIPT_PATH = path.join(__dirname, '..', 'scripts', 'generate_ritual_music.py');\n\n  constructor() {\n    this.outputDir = path.join(__dirname, '..', '..', 'output', 'soundscapes');\n    // Create output directory if it doesn't exist\n    if (!fs.existsSync(this.outputDir)) {\n      fs.mkdirSync(this.outputDir, { recursive: true });\n    }\n  }\n\n  /**\n   * Synthesizes ritual music based on cultural parameters and mood\n   * @param params Ritual soundscape parameters\n   * @returns Promise with synthesis result\n   */\n  async synthesizeRitualMusic(params: RitualSoundscape): Promise<SynthesisResult> {\n    try {\n      const outputFile = path.join(this.outputDir, `ritual_${Date.now()}.wav`);\n      const instrumentsArg = params.instruments.join(',');\n      const command = `${this.BASE_COMMAND} ${this.SCRIPT_PATH} --culture "${params.culture}" --mood "${params.mood}" --duration ${params.duration} --instruments "${instrumentsArg}" --output "${outputFile}"`;\n\n      console.log(`Executing synthesis command: ${command}`);\n      const { stdout, stderr } = await execPromise(command);\n\n      if (stderr) {\n        console.error(`Synthesis error: ${stderr}`);\n        return {\n          filePath: outputFile,\n          duration: params.duration,\n          error: stderr\n        };\n      }\n\n      console.log(`Synthesis completed: ${stdout}`);\n      return {\n        filePath: outputFile,\n        duration: params.duration\n      };\n    } catch (error) {\n      console.error(`Failed to synthesize music: ${error.message}`);\n      return {\n        filePath: '',\n        duration: params.duration,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Retrieves available cultural sound profiles\n   * @returns Array of supported cultural profiles\n   */\n  getCulturalProfiles(): string[] {\n    return ['African', 'NativeAmerican', 'Tibetan', 'Indian', 'Celtic', 'Nordic'];\n  }\n\n  /**\n   * Validates synthesis parameters\n   * @param params Ritual soundscape parameters\n   * @returns Validation result as boolean\n   */\n  validateParameters(params: RitualSoundscape): boolean {\n    const validMoods = ['calm', 'intense', 'mystical', 'celebratory'];\n    return (\n      params.culture.length > 0 &&\n      validMoods.includes(params.mood) &&\n      params.duration > 0 &&\n      params.duration <= 300 && // Max 5 minutes\n      params.instruments.length > 0\n    );\n  }\n\n  /**\n   * Cleans up old sound files\n   * @param maxAge Maximum age in hours\n   */\n  async cleanupOldFiles(maxAge: number = 24): Promise<void> {\n    const now = Date.now();\n    const maxAgeMs = maxAge * 60 * 60 * 1000;\n\n    fs.readdirSync(this.outputDir).forEach(file => {\n      const filePath = path.join(this.outputDir, file);\n      const stats = fs.statSync(filePath);\n      if (now - stats.mtimeMs > maxAgeMs) {\n        fs.unlinkSync(filePath);\n        console.log(`Deleted old sound file: ${file}`);\n      }\n    });\n  }\n}\n\nexport default new MusicSynthesisService();\n",
  "commands": [
    "git add backend/src/services/musicSynthesisService.ts",
    "git commit -m \"ðŸ¤– Add AI-powered ritual music and sound synthesis [AI]\"",
    "git push origin main"
  ],
  "testCommand": "node -e \"console.log('Test completed')\""
}